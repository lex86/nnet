!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=g++$/;"	m
CCFLAGS	Makefile	/^CCFLAGS=-Wall -fPIC -std=c++11 -c $/;"	m
DiffSigmoid	inc/functor.h	/^class DiffSigmoid : public Functor$/;"	c
Functor	inc/functor.h	/^class Functor$/;"	c
INCLUDES	Makefile	/^INCLUDES=-I.\/inc$/;"	m
LDFLAGS	Makefile	/^LDFLAGS=-shared -lcblas -ljson-c$/;"	m
LIB	Makefile	/^LIB=lib\/libnnet.so$/;"	m
Layer	inc/layer.h	/^class Layer$/;"	c
Layer	src/layer.cpp	/^Layer::Layer(const Layer& l) $/;"	f	class:Layer
Layer	src/layer.cpp	/^Layer::Layer(const Layer&& l) $/;"	f	class:Layer
Layer	src/layer.cpp	/^Layer::Layer(int in_dim, int out_dim, Functor f, Functor diff_f) :$/;"	f	class:Layer
Master	python/dc.py	/^class Master:$/;"	c
Matrix	inc/matrix.h	/^class Matrix$/;"	c
Matrix	src/matrix.cpp	/^Matrix::Matrix() : m_data(nullptr), m_num_rows(0), m_num_cols(0), m_owner(true) {} $/;"	f	class:Matrix
Matrix	src/matrix.cpp	/^Matrix::Matrix(Matrix&& mat) : m_data(nullptr), m_num_rows(0), m_num_cols(0), m_owner(true) $/;"	f	class:Matrix
Matrix	src/matrix.cpp	/^Matrix::Matrix(const Matrix& mat) : m_data(nullptr), m_num_rows(0), m_num_cols(0), m_owner(true) $/;"	f	class:Matrix
Matrix	src/matrix.cpp	/^Matrix::Matrix(int num_rows, int num_cols) : m_data(nullptr), m_num_rows(0), m_num_cols(0), m_owner(true) {$/;"	f	class:Matrix
Matrix	src/matrix.cpp	/^Matrix::Matrix(int num_rows, int num_cols, double* data_ptr) : m_data(nullptr), m_num_rows(0), m_num_cols(0), m_owner(false)  {$/;"	f	class:Matrix
NNet	inc/nnet.h	/^    NNet() {}$/;"	f	class:NNet
NNet	inc/nnet.h	/^class NNet$/;"	c
NNet	python/nnet.py	/^class NNet:$/;"	c
NNetManager	python/dc.py	/^        class NNetManager(BaseManager):$/;"	c	function:Master.__init__
NNetManager	python/dc.py	/^        class NNetManager(BaseManager):$/;"	c	function:Worker.__init__
NNet_backward	src/nnet_api.cpp	/^int NNet_backward(NNet* nnet, int num_rows, int num_cols, double* labels) $/;"	f
NNet_destroy	src/nnet_api.cpp	/^void NNet_destroy(NNet* nnet)$/;"	f
NNet_forward	src/nnet_api.cpp	/^int NNet_forward(NNet* nnet, int num_rows, int num_cols, double* data)$/;"	f
NNet_get_layer_dims	src/nnet_api.cpp	/^int NNet_get_layer_dims(NNet* nnet, int index, int* in_dim, int* out_dim)$/;"	f
NNet_get_layer_gradients	src/nnet_api.cpp	/^int NNet_get_layer_gradients(NNet* nnet, int index, int num_rows, int num_cols, double* weight_gradients, int dim, double* bias_gradients)$/;"	f
NNet_get_layer_params	src/nnet_api.cpp	/^int NNet_get_layer_params(NNet* nnet, int index, int num_rows, int num_cols, double* weights, int dim, double* biases)$/;"	f
NNet_init	src/nnet_api.cpp	/^NNet* NNet_init(const char* cfg_path)$/;"	f
NNet_set_layer_params	src/nnet_api.cpp	/^int NNet_set_layer_params(NNet* nnet, int index, int num_rows, int num_cols, double* weights, int dim, double* biases)$/;"	f
NNet_size	src/nnet_api.cpp	/^int NNet_size(NNet* nnet, int* size)$/;"	f
NNet_update_layer_params	src/nnet_api.cpp	/^int NNet_update_layer_params(NNet* nnet, int index, int num_rows, int num_cols, double* weight_gradients, int dim, double* bias_gradients)$/;"	f
OBJECTS	Makefile	/^OBJECTS=$(addprefix obj\/,$(notdir $(SOURCES:.cpp=.o)))$/;"	m
SOURCES	Makefile	/^SOURCES=$(wildcard src\/*.cpp)$/;"	m
Sigmoid	inc/functor.h	/^class Sigmoid : public Functor$/;"	c
VPATH	Makefile	/^VPATH=src$/;"	m
Vector	inc/vector.h	/^class Vector$/;"	c
Vector	src/vector.cpp	/^Vector::Vector() : m_data(nullptr), m_dim(0), m_owner(true) {}$/;"	f	class:Vector
Vector	src/vector.cpp	/^Vector::Vector(Vector&& vec) : m_data(nullptr), m_dim(0), m_owner(true) $/;"	f	class:Vector
Vector	src/vector.cpp	/^Vector::Vector(const Vector& vec) : m_data(nullptr), m_dim(0), m_owner(true) $/;"	f	class:Vector
Vector	src/vector.cpp	/^Vector::Vector(int dim) : m_data(nullptr), m_dim(0), m_owner(true) $/;"	f	class:Vector
Vector	src/vector.cpp	/^Vector::Vector(int dim, double* data_ptr) : m_data(nullptr), m_dim(0), m_owner(true) $/;"	f	class:Vector
Worker	python/dc.py	/^class Worker:$/;"	c
__del__	python/nnet.py	/^    def __del__(self):$/;"	m	class:NNet	file:
__init__	python/dc.py	/^    def __init__(self):$/;"	m	class:Worker
__init__	python/dc.py	/^    def __init__(self, cfg_path):$/;"	m	class:Master
__init__	python/nnet.py	/^    def __init__(self, cfg_path):$/;"	m	class:NNet
add_mat	src/matrix.cpp	/^void Matrix::add_mat(double alpha, const Matrix& A, double beta)$/;"	f	class:Matrix
add_matT_mat	src/matrix.cpp	/^void Matrix::add_matT_mat(double alpha, const Matrix& A, const Matrix& B, double beta)$/;"	f	class:Matrix
add_mat_mat	src/matrix.cpp	/^void Matrix::add_mat_mat(double alpha, const Matrix& A, const Matrix& B, double beta)$/;"	f	class:Matrix
add_mat_matT	src/matrix.cpp	/^void Matrix::add_mat_matT(double alpha, const Matrix& A, const Matrix& B, double beta)$/;"	f	class:Matrix
add_row_sum_mat	src/vector.cpp	/^void Vector::add_row_sum_mat(double alpha, const Matrix& A, double beta)$/;"	f	class:Vector
add_vec	src/vector.cpp	/^void Vector::add_vec(double alpha, const Vector& a, double beta)$/;"	f	class:Vector
add_vec_to_rows	src/matrix.cpp	/^void Matrix::add_vec_to_rows(double alpha, const Vector& v, double beta)$/;"	f	class:Matrix
apply_diffsigmoid	src/matrix.cpp	/^void Matrix::apply_diffsigmoid()$/;"	f	class:Matrix
apply_sigmoid	src/matrix.cpp	/^void Matrix::apply_sigmoid()$/;"	f	class:Matrix
backward	src/layer.cpp	/^void Layer::backward(const Matrix& layer_in, const Matrix& in_deltas, Matrix& out_deltas)$/;"	f	class:Layer
backward	src/layer.cpp	/^void Layer::backward(const Matrix& layer_in, const Matrix& nnet_out, const Matrix& labels, Matrix& out_deltas)$/;"	f	class:Layer
backward	src/nnet.cpp	/^void NNet::backward(const Matrix& labels)$/;"	f	class:NNet
data	inc/matrix.h	/^    const double* data() const { return m_data; }$/;"	f	class:Matrix
data	inc/matrix.h	/^    double* data() { return m_data; }$/;"	f	class:Matrix
data	inc/vector.h	/^    const double* data() const { return m_data; }$/;"	f	class:Vector
data	inc/vector.h	/^    double* data() { return m_data; }$/;"	f	class:Vector
data	python/nnet_test.py	/^    data = np.random.rand(768, 10)$/;"	v
dim	inc/vector.h	/^    int dim() const { return m_dim; }$/;"	f	class:Vector
forward	python/nnet.py	/^    def forward(self, data):$/;"	m	class:NNet
forward	src/layer.cpp	/^void Layer::forward(const Matrix& in, Matrix& out)$/;"	f	class:Layer
forward	src/nnet.cpp	/^void NNet::forward(const Matrix& data)$/;"	f	class:NNet
get_dims	src/layer.cpp	/^void Layer::get_dims(int* in_dim, int* out_dim)$/;"	f	class:Layer
get_layer	inc/nnet.h	/^    Layer& get_layer(int index) { return m_layers[index]; }$/;"	f	class:NNet
get_layer_gradients	src/nnet.cpp	/^void NNet::get_layer_gradients(int index, Matrix& grad_W, Vector& grad_b)$/;"	f	class:NNet
get_learning_rate	inc/nnet.h	/^    int get_learning_rate() const { return m_learning_rate; }$/;"	f	class:NNet
get_num_iters	inc/nnet.h	/^    int get_num_iters() const { return m_num_iters; }$/;"	f	class:NNet
get_params	src/layer.cpp	/^void Layer::get_params(Matrix& W, Vector& b)$/;"	f	class:Layer
init	src/nnet.cpp	/^void NNet::init(const char* cfg_path)$/;"	f	class:NNet
m_W	inc/layer.h	/^    Matrix m_W;$/;"	m	class:Layer
m_activation	inc/nnet.h	/^    std::string m_activation;$/;"	m	class:NNet
m_b	inc/layer.h	/^    Vector m_b;$/;"	m	class:Layer
m_backward_buff	inc/nnet.h	/^    std::vector<Matrix> m_backward_buff;$/;"	m	class:NNet
m_data	inc/matrix.h	/^    double* m_data;$/;"	m	class:Matrix
m_data	inc/vector.h	/^    double* m_data;$/;"	m	class:Vector
m_diff_f	inc/layer.h	/^    Functor m_diff_f;$/;"	m	class:Layer
m_dim	inc/vector.h	/^    int m_dim;$/;"	m	class:Vector
m_dims	inc/nnet.h	/^    std::vector<int> m_dims;$/;"	m	class:NNet
m_f	inc/layer.h	/^    Functor m_f;$/;"	m	class:Layer
m_forward_buff	inc/nnet.h	/^    std::vector<Matrix> m_forward_buff;$/;"	m	class:NNet
m_in_dim	inc/layer.h	/^    int m_in_dim;$/;"	m	class:Layer
m_layers	inc/nnet.h	/^    std::vector<Layer> m_layers;$/;"	m	class:NNet
m_learning_rate	inc/nnet.h	/^    double m_learning_rate;$/;"	m	class:NNet
m_num_cols	inc/matrix.h	/^    int m_num_cols;$/;"	m	class:Matrix
m_num_iters	inc/nnet.h	/^    int m_num_iters;$/;"	m	class:NNet
m_num_rows	inc/matrix.h	/^    int m_num_rows;$/;"	m	class:Matrix
m_out_dim	inc/layer.h	/^    int m_out_dim;$/;"	m	class:Layer
m_owner	inc/matrix.h	/^    bool m_owner;$/;"	m	class:Matrix
m_owner	inc/vector.h	/^    bool m_owner;$/;"	m	class:Vector
mul_mat	src/matrix.cpp	/^void Matrix::mul_mat(double alpha, const Matrix& A)$/;"	f	class:Matrix
nn	python/nnet_test.py	/^    nn = NNet('config.json')$/;"	v
nnet	inc/nnet.h	/^    NNet& operator=(const NNet& nnet) = delete;$/;"	m	class:NNet
nnet	inc/nnet.h	/^    NNet& operator=(const NNet&& nnet) = delete;$/;"	m	class:NNet
nnet	inc/nnet.h	/^    NNet(const NNet& nnet) = delete;$/;"	m	class:NNet
nnet	inc/nnet.h	/^    NNet(const NNet&& nnet) = delete;$/;"	m	class:NNet
nnetlib	python/nnet.py	/^nnetlib = np.ctypeslib.load_library('libnnet', '..\/lib\/')$/;"	v
num_cols	inc/matrix.h	/^    int num_cols() const { return m_num_cols; }$/;"	f	class:Matrix
num_rows	inc/matrix.h	/^    int num_rows() const { return m_num_rows; }$/;"	f	class:Matrix
operator ()	src/functor.cpp	/^Matrix DiffSigmoid::operator()(const Matrix& W, const Matrix& X, const Vector& b)$/;"	f	class:DiffSigmoid
operator ()	src/functor.cpp	/^Matrix Sigmoid::operator()(const Matrix& W, const Matrix& X, const Vector& b)$/;"	f	class:Sigmoid
operator ()	src/functor.cpp	/^inline Matrix Functor::operator()(const Matrix& W, const Matrix& X, const Vector& b)$/;"	f	class:Functor
operator =	src/layer.cpp	/^Layer& Layer::operator=(const Layer& l) $/;"	f	class:Layer
operator =	src/layer.cpp	/^Layer& Layer::operator=(const Layer&& l) $/;"	f	class:Layer
operator =	src/matrix.cpp	/^Matrix& Matrix::operator=(Matrix&& mat)$/;"	f	class:Matrix
operator =	src/matrix.cpp	/^Matrix& Matrix::operator=(const Matrix& mat)$/;"	f	class:Matrix
operator =	src/vector.cpp	/^Vector& Vector::operator=(Vector&& vec)$/;"	f	class:Vector
operator =	src/vector.cpp	/^Vector& Vector::operator=(const Vector& vec)$/;"	f	class:Vector
run	python/dc.py	/^    def run():$/;"	m	class:Worker
run	python/dc.py	/^    def run(data):$/;"	m	class:Master
set_params	src/layer.cpp	/^void Layer::set_params(const Matrix& W, const Vector& b)$/;"	f	class:Layer
size	inc/nnet.h	/^    int size() const { return m_layers.size(); }$/;"	f	class:NNet
size	python/nnet.py	/^    def size(self):$/;"	m	class:NNet
update_layer_params	src/nnet.cpp	/^void NNet::update_layer_params(int index, const Matrix& grad_W, const Vector& grad_b)$/;"	f	class:NNet
update_params	src/layer.cpp	/^void Layer::update_params(const Matrix& grad_W, const Vector& grad_b, double lrate)$/;"	f	class:Layer
~DiffSigmoid	inc/functor.h	/^    ~DiffSigmoid() {}$/;"	f	class:DiffSigmoid
~Functor	inc/functor.h	/^    virtual ~Functor() {}$/;"	f	class:Functor
~Layer	src/layer.cpp	/^Layer::~Layer()$/;"	f	class:Layer
~Matrix	src/matrix.cpp	/^Matrix::~Matrix()$/;"	f	class:Matrix
~NNet	inc/nnet.h	/^    ~NNet() {}$/;"	f	class:NNet
~Sigmoid	inc/functor.h	/^    ~Sigmoid() {}$/;"	f	class:Sigmoid
~Vector	src/vector.cpp	/^Vector::~Vector()$/;"	f	class:Vector
